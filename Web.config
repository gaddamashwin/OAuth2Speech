<?xml version="1.0"?>
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler" requirePermission="false" />
		<sectionGroup name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection, DotNetOpenAuth">
			<section name="openid" type="DotNetOpenAuth.Configuration.OpenIdElement, DotNetOpenAuth" requirePermission="false" allowLocation="true" />
			<section name="oauth" type="DotNetOpenAuth.Configuration.OAuthElement, DotNetOpenAuth" requirePermission="false" allowLocation="true" />
			<section name="messaging" type="DotNetOpenAuth.Configuration.MessagingElement, DotNetOpenAuth" requirePermission="false" allowLocation="true" />
			<section name="reporting" type="DotNetOpenAuth.Configuration.ReportingElement, DotNetOpenAuth" requirePermission="false" allowLocation="true" />
		</sectionGroup>
	</configSections>

	<!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
	     which is necessary for OpenID urls with unicode characters in the domain/host name. 
	     It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
	<!--<uri>
		<idn enabled="All"/>
		<iriParsing enabled="true"/>
	</uri>-->
	<system.net>
		<defaultProxy enabled="true" />
		<settings>
			<!-- This setting causes .NET to check certificate revocation lists (CRL) 
			     before trusting HTTPS certificates.  But this setting tends to not 
			     be allowed in shared hosting environments. -->
			<!--<servicePointManager checkCertificateRevocationList="true"/>-->
		</settings>
	</system.net>

	<!-- this is an optional configuration section where aspects of dotnetopenauth can be customized -->
	<dotNetOpenAuth>
		<!-- Allow DotNetOpenAuth to publish usage statistics to library authors to improve the library. -->
		<reporting enabled="true" />

		<!-- Relaxing SSL requirements is useful for simple samples, but NOT a good idea in production. -->
		<messaging relaxSslRequirements="true" />
	</dotNetOpenAuth>

	<appSettings>
		<!-- Fill in your various consumer keys and secrets here to make the sample work. -->
		<!-- You must get these values by signing up with each individual service provider. -->
		<!-- Twitter sign-up: https://twitter.com/oauth_clients -->
		<add key="twitterConsumerKey" value="eRJd2AMcOnGqDOtF3IrBQ" />
		<add key="twitterConsumerSecret" value="iTijQWFOSDokpkVIPnlLbdmf3wPZgUVqktXKASg0QjM" />
		<!-- Google sign-up: https://www.google.com/accounts/ManageDomains -->
		<add key="googleConsumerKey" value="anonymous"/>
		<add key="googleConsumerSecret" value="anonymous"/>
    <!--Google API sign-up: https://code.google.com/apis/console/ (OAuth2) -->
    <add key="googleClientID" value="385814615251.apps.googleusercontent.com" />
    <add key="googleClientSecret" value="xwcPF6F1QTrl3kDM8GKwkbXo" />    
		<!-- Yammer sign-up: https://www.yammer.com/client_applications/new -->
		<!--<add key="yammerConsumerKey" value=""/>
		<add key="yammerConsumerSecret" value=""/>-->
		<!-- Facebook sign-up: http://developers.facebook.com/setup/ -->
		<add key="facebookAppID" value="187644114736576"/>
		<add key="facebookAppSecret" value="32e38ead327a5ed6fa31d0aab7bfd9e6"/>
		<!-- Windows Live sign-up: http://go.microsoft.com/fwlink/p/?LinkId=193157 -->
		<add key="windowsLiveAppID" value="00000000480FF82B" />
		<add key="windowsLiveAppSecret" value="EKABfYa7TKXoaiW2fx98dopSci8EYX4c" />
		<!-- AzureAD sign-up: http://manage.windowsazure.com -->
		<!--<add key="AzureADAppID" value="64e0b14b-43ae-497c-b1a8-e8a841a341fd" />
		<add key="AzureADAppSecret" value="MySecretPassword" />-->
	</appSettings>
	<connectionStrings/>

	<system.web>
		<!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
		<compilation debug="true" targetFramework="4.0">
			<assemblies>
				<remove assembly="DotNetOpenAuth.Contracts"/>
			</assemblies>
		</compilation>
		<!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
        -->
		<authentication mode="Windows"/>
		<!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
        -->
		<pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID" />
	</system.web>
	<!-- 
        The system.webServer section is required for running ASP.NET AJAX under Internet
        Information Services 7.0.  It is not necessary for previous version of IIS.
    -->
	<log4net>
		<appender name="TracePageAppender" type="OAuth2Speech.TracePageAppender, OAuth2Speech">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date (GMT%date{%z}) [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<!-- Setup the root category, add the appenders and set the default level -->
		<root>
			<level value="INFO" />
			<!--<appender-ref ref="RollingFileAppender" />-->
			<appender-ref ref="TracePageAppender" />
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name="DotNetOpenAuth">
			<level value="ALL" />
		</logger>
	</log4net>
	<system.serviceModel>
		<bindings />
		<client />
	</system.serviceModel>
	<system.webServer>
		<modules runAllManagedModulesForAllRequests="true" />
	</system.webServer>
</configuration>
